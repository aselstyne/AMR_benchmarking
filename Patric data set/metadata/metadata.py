
import sys
import os
sys.path.append('../')
sys.path.insert(0, os.getcwd())
import pandas as pd
import amr_utility.name_utility


'''
#Summarize the number of strains and species in the Patric 
# Patric AMR phenotype data generated by laboratory methods, including:
#67836 genomes strains and 99 species.
#retain only this that has >=1000 strains for a specified antibotic w.r.t. a species:
# 10 species(see file list_species_sorting.txt and list_species_final.txt ) and 62783 genomes(genome_list).
# All the genome sequences are downloaded in /vol/projects/BIFO/patric_genome

'list_strain.txt','list_temp.txt': list of all the strains in the AMR phenotype data.# To be optimized....
'genome_list': list for downloading.
'list_species.txt': list of all the species in the AMR phenotype data
'list_species_final_bq.txt': list of all the species > 1000 strains in the AMR phenotype. bq: before quality control.
'list_species_final_quality.csv': list of selected species with fine quality
'Species_antibiotic_FineQuality.csv': selected antibiotics after filter. Only For visualization. 
'Number of fine quality genomes', 'number of genome','count'
'quality/GenomeFineQuality_'+str(species.replace(" ", "_"))+'.txt': fine quality genome ID w.r.t. each species.
==============
'''



def summarise_strain():
    '''load in metadata,summerise the strain info
    Index(['genome_id', 'genome_name', 'taxon_id', 'antibiotic',
           'resistant_phenotype', 'measurement', 'measurement_sign',
           'measurement_value', 'measurement_unit', 'laboratory_typing_method',
           'laboratory_typing_method_version', 'laboratory_typing_platform',
           'vendor', 'testing_standard', 'testing_standard_year', 'source'],
          dtype='object')
    '''
    data = pd.read_csv('PATRIC_genomes_AMR.txt', dtype={'genome_id': object},sep="\t")
    #print(data)
    #with pd.option_context('display.max_rows', None, 'display.max_columns', None):
        #print( data.loc[0:1000,('genome_id')] )

    #get the first column, save it in a file named genome_list
    list= data.loc[:,("genome_id","genome_name")]

    print(list)
    list=list.groupby(by="genome_id")
    summary=list.describe()
    summary.to_csv('list_strain.txt', sep="\t")  # 67836 genomes strains and 99 species.

#====================================
def summarise_species():
    '''summerise the species info'''
    data = pd.read_csv('list_strain.txt', dtype={'genome_id': object},skiprows=2,sep="\t",header=0)
    data.columns = ['genome_id','count', 'unique', 'top', 'freq']
    print(data)
    print(data.columns)

    #summarize the strains
    data['top']=data['top'].astype(str)#add a new column
    data['species']=data.top.apply(lambda x: ' '.join(x.split(' ')[0:2]))
    print(data)
    #Note: download genome data from here, i.e. for each strain.
    data.to_csv('list_temp.txt',sep="\t")
    data=data.loc[:,("genome_id","species")]
    #make a summary by strain
    data_s=data.groupby(by="species")
    summary_species=data_s.describe()
    summary_species.to_csv('list_species.txt',sep="\t")#list of all species
#================================================================
def sorting_deleteing(N):
    '''retain only this that has >=N strains for a specific antibotic w.r.t. a species'''
    data = pd.read_csv('list_species.txt', dtype={'genome_id': object},skiprows=2,sep="\t",header=0)
    data=data.iloc[:,0:2]
    data.columns = ['species','count']
    print(data)

    data=data.sort_values(by=['count'],ascending=False)#sorting
    data = data.reset_index(drop=True)
    #data = data[data.species != ' nan']
    #print('here:',data.loc[41, 'species'])
    with pd.option_context('display.max_rows', None, 'display.max_columns', None):
        print(data)
    data.to_csv('list_species_sorting.txt',sep="\t")

    data = data[data['count'] > N]#deleting
    print(data)
    data.to_csv('list_species_final_bq.txt',sep="\t")#list of all species selected by 1st round.
#=================================================================
def extract_id():
    '''extract (useful) patric id to genome_list
    before quality control'''
    data=pd.read_csv('list_temp.txt', dtype={'genome_id': object},sep="\t")
    df_species = pd.read_csv('list_species_final_bq.txt', dtype={'genome_id': object},sep="\t",header=0)
    species=df_species['species']
    species=species.tolist()
    print(species)
    print(data)
    #select rows that strain name belongs to the 10 in df_species
    data = data.loc[data['species'].isin(species)]
    print(data)
    data = data.reset_index(drop=True)
    list_download=data['genome_id']
    print(list_download)
    list_download.to_csv('genome_list',sep="\t",index=False,header=False)#all the genome ID should be downloaded.
    #maybe larger then aroginally downloaded, because two more species are considered here, but later considering antibiotic,


def extract_id_species(path):
    '''
    extract id for each species. For feature, not for models(need more filter)!
    :return: txt file containing ID for each species
    '''
    data, info_species = amr_utility.name_utility.load_metadata(SpeciesFile='list_species_final_bq.txt')
    for species in info_species:
        data_sub = data[data['species'] == species]
        # print(data_sub)
        #rm duplicates
        data_sub_uniqueID = data_sub.groupby(by="genome_id").count()
        ID = data_sub_uniqueID.index.to_list()
        ID_kmer = pd.DataFrame(ID, columns=["genome_id"])
        # --------
        #for kmer use
        save_name_speciesID=amr_utility.name_utility.save_name_speciesID(species,f=True)
        ID_kmer.to_csv(save_name_speciesID, sep="\t")

        #-------------
        #for ODH use
        path = []
        for i in ID:
            path.append(path+str(i)+'.fna')
        data_sub_uniqueID["path"] = path
        # print(data_sub_uniqueID)
        ID_odh=data_sub_uniqueID[['path']]
        # print('Number of strains:', len(ID))
        print(ID_odh)
        ID_odh.to_csv('../log/feature/odh/log_'+str(species.replace(" ", "_"))+'.list',header=0,  sep="\t")






if __name__ == '__main__':
    ## main.make_dir()#preparing folders for results
    # summarise_strain()
    # summarise_species()
    # sorting_deleteing(500)#retain only this that has >=N strains for a specif antibotic w.r.t. a species'''
    # extract_id()
    extract_id_species('/vol/projects/BIFO/patric_genome/')#the path of the sequence data
    # download_quality()
    # extract_id_quality() #downloaded quality meta data, saved at the subdirectory quality.
    # filter_quality()
    #===========================================
    # only for the author use, delete when completing.
    # check_dif: check the difference of included strains for two sets of criteria
    # extract_id_quality_analysis(check_dif=False)
    #============================================



