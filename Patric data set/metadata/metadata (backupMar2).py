
import sys
import os
sys.path.append('../')
sys.path.insert(0, os.getcwd())
import pandas as pd
import amr_utility.name_utility


'''
#Summarize the number of strains and species in the Patric 
# Patric AMR phenotype data generated by laboratory methods, including:
#67836 genomes strains and 99 species.
#retain only this that has >=1000 strains for a specified antibotic w.r.t. a species:
# 10 species(see file list_species_sorting.txt and list_species_final.txt ) and 62783 genomes(genome_list).
# All the genome sequences are downloaded in /vol/projects/BIFO/patric_genome

'list_strain.txt','list_temp.txt': list of all the strains in the AMR phenotype data.# To be optimized....
'genome_list': list for downloading.
'list_species.txt': list of all the species in the AMR phenotype data
'list_species_final_bq.txt': list of all the species > 1000 strains in the AMR phenotype. bq: before quality control.
'list_species_final_quality.csv': list of selected species with fine quality
'Species_antibiotic_FineQuality.csv': selected antibiotics after filter. Only For visualization. 
'Number of fine quality genomes', 'number of genome','count'
'quality/GenomeFineQuality_'+str(species.replace(" ", "_"))+'.txt': fine quality genome ID w.r.t. each species.
==============
'''



def summarise_strain():
    '''load in metadata,summerise the strain info
    Index(['genome_id', 'genome_name', 'taxon_id', 'antibiotic',
           'resistant_phenotype', 'measurement', 'measurement_sign',
           'measurement_value', 'measurement_unit', 'laboratory_typing_method',
           'laboratory_typing_method_version', 'laboratory_typing_platform',
           'vendor', 'testing_standard', 'testing_standard_year', 'source'],
          dtype='object')
    '''
    data = pd.read_csv('PATRIC_genomes_AMR.txt', dtype={'genome_id': object},sep="\t")
    #print(data)
    #with pd.option_context('display.max_rows', None, 'display.max_columns', None):
        #print( data.loc[0:1000,('genome_id')] )

    #get the first column, save it in a file named genome_list
    list= data.loc[:,("genome_id","genome_name")]

    print(list)
    list=list.groupby(by="genome_id")
    summary=list.describe()
    summary.to_csv('list_strain.txt', sep="\t")  # 67836 genomes strains and 99 species.

#====================================
def summarise_species():
    '''summerise the species info'''
    data = pd.read_csv('list_strain.txt', dtype={'genome_id': object},skiprows=2,sep="\t",header=0)
    data.columns = ['genome_id','count', 'unique', 'top', 'freq']
    print(data)
    print(data.columns)

    #summarize the strains
    data['top']=data['top'].astype(str)#add a new column
    data['species']=data.top.apply(lambda x: ' '.join(x.split(' ')[0:2]))
    print(data)
    #Note: download genome data from here, i.e. for each strain.
    data.to_csv('list_temp.txt',sep="\t")
    data=data.loc[:,("genome_id","species")]
    #make a summary by strain
    data_s=data.groupby(by="species")
    summary_species=data_s.describe()
    summary_species.to_csv('list_species.txt',sep="\t")#list of all species
#================================================================
def sorting_deleteing(N):
    '''retain only this that has >=N strains for a specific antibotic w.r.t. a species'''
    data = pd.read_csv('list_species.txt', dtype={'genome_id': object},skiprows=2,sep="\t",header=0)
    data=data.iloc[:,0:2]
    data.columns = ['species','count']
    print(data)

    data=data.sort_values(by=['count'],ascending=False)#sorting
    data = data.reset_index(drop=True)
    #data = data[data.species != ' nan']
    #print('here:',data.loc[41, 'species'])
    with pd.option_context('display.max_rows', None, 'display.max_columns', None):
        print(data)
    data.to_csv('list_species_sorting.txt',sep="\t")

    data = data[data['count'] > N]#deleting
    print(data)
    data.to_csv('list_species_final_bq.txt',sep="\t")#list of all species selected by 1st round.
#=================================================================
def extract_id():
    '''extract (useful) patric id to genome_list
    before quality control'''
    data=pd.read_csv('list_temp.txt', dtype={'genome_id': object},sep="\t")
    df_species = pd.read_csv('list_species_final_bq.txt', dtype={'genome_id': object},sep="\t",header=0)
    species=df_species['species']
    species=species. tolist()
    print(species)
    print(data)
    #select rows that strain name belongs to the 10 in df_species
    data = data.loc[data['strain'].isin(species)]
    print(data)
    data = data.reset_index(drop=True)
    list_download=data['genome_id']
    print(list_download)
    list_download.to_csv('genome_list',sep="\t",index=False,header=False)#all the genome ID should be downloaded.
    #maybe larger then aroginally downloaded, because two more species are considered here, but later considering antibiotic,








def download_quality():
    '''download files related to selecting good quality genomes'''

    data, info_species=amr_utility.name_utility.load_metadata(SpeciesFile='list_species_final_bq.txt')
    for species in info_species:

        para_genus=species.split(' ')[0]
        para_species=species.split(' ')[1]

        bashCommand = "p3-all-genomes --eq genus,"+str(para_genus)+ \
                      " --eq species,"+ str(para_species)+ \
                      " -a genome_name,genome_status,genome_length,genome_quality,plasmids,contigs," \
                      "fine_consistency,coarse_consistency,checkm_completeness,checkm_contamination " \
                      " >  quality/"+str(para_genus)+"_"+str(para_species)+".csv"
        print(bashCommand)
        #process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
        #output, error = process.communicate()
        #by hand...
def extract_id_quality():
    '''
    inpout: downloaded quality meta data, saved at the subdirectory: /quality.

    #output:
    'quality/GenomeFineQuality_'+str(species.replace(" ", "_"))+'.txt' fine quality w.r.t. each species.
    'list_species_final_quality.csv' summary visualization.
    # selected fine quality genomoe ID for each species.
    Critieria:
    Genome Status != Plasmid
    genome_quality==Good
    Contigs <= 100
    fine_consistency>= 97
    Coarse consistency >= 98
    then, caluculate the mean genome_length
    filter abs(genome length - mean length) <= mean length/20'''
    data, info_species = amr_utility.name_utility.load_metadata(SpeciesFile='list_species_final_bq.txt')
    number_All=[]
    number_FineQuality=[]
    for species in info_species:
    #for species in ['Pseudomonas aeruginosa']:
        para_genus = species.split(' ')[0]
        para_species = species.split(' ')[1]
        df=pd.read_csv("quality/"+str(para_genus)+"_"+str(para_species)+".csv",
                       dtype={'genome.genome_id': object, 'genome.genome_name': object}, sep="\t")
        number_All.append(df.shape[0])
        #with pd.option_context('display.max_rows', 5, 'display.max_columns', None):
            #print(df)

        # df = df[(df['genome.genome_status'] != 'Plasmid') &(df['genome.genome_quality'] == 'Good') &(df['genome.contigs']<= 100)
        #         &(df['genome.fine_consistency']>= 97)&(df['genome.coarse_consistency']>= 98)]
        df= df[(df['genome.genome_status'] != 'Plasmid') & (df['genome.genome_quality'] == 'Good') & (df['genome.contigs'] <= 100)
             & (df['genome.fine_consistency'] >= 97) & (df['genome.coarse_consistency'] >= 98) & (df['genome.checkm_completeness'] >= 98)
             & (df['genome.checkm_contamination'] <= 2)]

        #caluculate the mean genome_length
        mean_genome_l=df["genome.genome_length"].mean()
        #filter abs(genome length - mean length) <= mean length/20'''
        df=df[abs(df['genome.genome_length']-mean_genome_l) <= mean_genome_l/20]

        if species == 'Pseudomonas aeruginosa' :#Pseudomonas_aeruginosa add on the genomes from S2G2P paper.
            pa_add = pd.read_csv('Pseudomonas_aeruginosa_add.txt', dtype={'genome.genome_id': object},header=0)
            df=df.append(pa_add, sort=False)
            df = df.drop_duplicates(subset=['genome.genome_id'])

        df = df.reset_index(drop=True)
        #with pd.option_context('display.max_rows', 5, 'display.max_columns', None):
            #print(df)
        # selected fine quality genome ID
        df.to_csv('quality/GenomeFineQuality_'+str(species.replace(" ", "_"))+'.txt', sep="\t")
        number_FineQuality.append(df.shape[0])
        #delete duplicates


    count_quality = pd.DataFrame(list(zip(number_All, number_FineQuality)), index=info_species, columns=['Number of genomes','Number of fine quality genomes'])

    print(count_quality)# species with antibiotic selected.

    count_species = pd.read_csv('list_species_final_bq.txt', dtype={'genome_id': object}, sep="\t",
                             header=0,index_col='species')
    count_final=pd.concat([count_species, count_quality], axis=1).reindex(count_species.index)# visualization. no selection in this cm.
    # filter Shigella sonnei and Enterococcus faecium, only 25,144
    count_final=count_final[count_final['Number of fine quality genomes']>200]
    count_final.rename(columns={'count': 'Number of genomes with AMR metadata'}, inplace=True)
    count_final.to_csv('list_species_final_quality.csv',sep="\t")#species list.
    print(count_final)
def extract_id_quality_analysis():
    '''Genome Status != Plasmid
    genome_quality==Good
    Contigs <= 100
    fine_consistency>= 97
    Coarse consistency >= 98
    checkm_completeness >= 98
    checkm_contamination <= 2
    then, caluculate the mean genome_length
    filter abs(genome length - mean length) <= mean length/20'''
    data, info_species = amr_utility.name_utility.load_metadata(SpeciesFile='list_species_final_bq.txt')
    # just check pa
    # data = data[(data.resistant_phenotype != 'Intermediate') & (data.resistant_phenotype != 'Not defined')]
    # g = data[data['genome_id'] == '1163395.3']
    # print(g)

    number_All=[]
    number_FineQuality=[]
    #for species in ['Pseudomonas aeruginosa']:
    for species in info_species:

        para_genus = species.split(' ')[0]
        para_species = species.split(' ')[1]
        df=pd.read_csv("../quality/"+str(para_genus)+"_"+str(para_species)+".csv",
                       dtype={'genome.genome_id': object, 'genome.genome_name': object}, sep="\t")
        number_All.append(df.shape[0])
        #with pd.option_context('display.max_rows', 5, 'display.max_columns', None):
            #print(df)
        #Genome Status != Plasmid

        # check if there is  not none in any of 'genome.checkm_completeness' 'genome.checkm_contamination'
        # 'genome.coarse_consistency''genome.fine_consistency' is not none
        '''
        df3=df[df['genome.checkm_completeness'].notnull()]
        print(df3['genome.fine_consistency'].isnull().values.any())
        print(df3['genome.coarse_consistency'].isnull().values.any())
        #check if
        df3 = df[df['genome.checkm_contamination'].notnull()]
        print(df3['genome.fine_consistency'].isnull().values.any())
        print(df3['genome.coarse_consistency'].isnull().values.any())
        pa = pd.read_csv('Pseudomonas_aeruginosa_add.txt', dtype={'genome.genome_id': object}, index_col=0, header=None)
        print(pa.index.tolist())
        result = df[df['genome.genome_id'].isin(pa.index.tolist())]
        print(result)
        result = result.groupby(by="genome.genome_id")['genome.genome_id']
        print(result.count())
        '''
        df1=df[(df['genome.genome_status'] != 'Plasmid') &(df['genome.genome_quality'] == 'Good') &(df['genome.contigs']<= 100)
                &(df['genome.fine_consistency']>= 97)&(df['genome.coarse_consistency']>= 98)]
        df2 = df[(df['genome.genome_status'] != 'Plasmid') &(df['genome.genome_quality'] == 'Good') &(df['genome.contigs']<= 100)
                &(df['genome.fine_consistency']>= 97)&(df['genome.coarse_consistency']>= 98)&(df['genome.checkm_completeness']>= 98)
                &(df['genome.checkm_contamination']<= 2)]

        common = df.merge(df2, on=['genome.genome_id'])

        diff=df[(~df['genome.genome_id'].isin(common['genome.genome_id']))]
        print(species)
        with pd.option_context('display.max_columns', None,'display.max_rows', None):
            print(diff[['genome.genome_id','genome.checkm_completeness','genome.checkm_contamination']])
        print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
        # diff=diff[['genome.genome_id', 'genome.checkm_completeness', 'genome.checkm_contamination']]
        diff.to_csv( 'log/meta/log_' + str(species.replace(" ", "_")) + '_diff.txt',sep="\t")
        # diff.to_csv('log/meta/log_' + str(species.replace(" ", "_")) + '_diff.txt', key='feature_matrix', mode='w')

        #caluculate the mean genome_length
        mean_genome_l=df["genome.genome_length"].mean()
        #filter abs(genome length - mean length) <= mean length/20'''
        df=df[abs(df['genome.genome_length']-mean_genome_l) <= mean_genome_l/20]
        df = df.reset_index(drop=True)
        #with pd.option_context('display.max_rows', 5, 'display.max_columns', None):
            #print(df)
        ##df.to_csv('quality/GenomeFineQuality_'+str(species.replace(" ", "_"))+'.txt', sep="\t")
        number_FineQuality.append(df.shape[0])



    count_quality = pd.DataFrame(list(zip(number_All, number_FineQuality)), index=info_species, columns=['Number of genomes','Number of fine quality genomes'])

    #print(count_quality)
    #change 'list_species_final.txt'
    count_species = pd.read_csv('list_species_final_bq.txt', dtype={'genome_id': object}, sep="\t",
                             header=0,index_col='species')
    count_final=pd.concat([count_species, count_quality], axis=1).reindex(count_species.index)
    # filter Shigella sonnei and Enterococcus faecium, only 25,144
    count_final=count_final[count_final['Number of fine quality genomes']>200]
    ##count_final.to_csv('list_species_final_quality.csv',sep="\t")
    print(count_final)

def unique_cols(df):
    a = df.to_numpy() # df.values (pandas<0.24)
    return (a[0] == a).all(0)
def filter_quality():
    '''filter quality by each species, and provide infor for each antibiotics
    variable: data_sub: selected genomes w.r.t. each species
    variable: data_sub_anti: slected genomes w.r.t. each species and antibioitc.
    Output: save_name_model :genome_id	resistant_phenotype. w.r.t. ach species and antibioitc, in log/model/
    Output: Species_quality & 'Species_antibiotic_FineQuality.csv': visualization ,selected species and antibioitc.
    '''
    # load in data for the selected 11 species
    #SpeciesFile define the species to be loaded in
    data, info_species = amr_utility.name_utility.load_metadata(SpeciesFile='list_species_final_quality.csv')

    # drop phenotype with 'Intermediate''Not defined'
    data = data[(data.resistant_phenotype != 'Intermediate') & (data.resistant_phenotype != 'Not defined')]
    #=======================================================
    Species_quality=pd.DataFrame(index=info_species, columns=['number','modelling antibiotics'])#initialize for visualization
    #print(Species_quality)
    #for species in ['Pseudomonas aeruginosa']:
    for species in info_species:
        data_sub = data[data['species'] == species]
        #with pd.option_context('display.max_columns', None):
            #print(data_sub)
        # [1]. select the id from genome_list that are also in good quality
        #====================================================================
        df = pd.read_csv('quality/GenomeFineQuality_' + str(species.replace(" ", "_")) + '.txt',
                         dtype={'genome.genome_id': object, 'genome.genome_name': object}, index_col=0,sep="\t")
        id_GoodQuality=df['genome.genome_id']
        data_sub=data_sub[data_sub['genome_id'].isin(id_GoodQuality)]
        #=====================================================================
        # by each antibiotic.
        data_anti = data_sub.groupby(by="antibiotic")['genome_id']
        summary = data_anti.count().to_frame()
        # summary.columns=['antibiotic','genome_id_count']

        summary = summary[summary['genome_id'] > 200]# select the antibiotic with genome_id.count >200
        # print(summary)
        select_antibiotic = summary.index.to_list()
        data_sub = data_sub.loc[data_sub['antibiotic'].isin(select_antibiotic)]
        # with pd.option_context('display.max_columns', None):
        # print(data_sub)
        # [2]. apply down sampling
        # ====================================================================
        print(species)
        print('============= Select_antibiotic:', len(select_antibiotic), select_antibiotic)
        select_antibiotic_fianl= select_antibiotic.copy()
        for anti in select_antibiotic:
            save_name_meta,save_name_modelID=amr_utility.name_utility.save_name_modelID(species,anti,True)
            # for anti in ['mupirocin', 'penicillin', 'rifampin', 'tetracycline', 'vancomycin']:
            # logDir = os.path.join('log/log_' + str(species.replace(" ", "_"))+'_'+str(anti))

            # select genome_id and  resistant_phenotype
            data_sub_anti = data_sub.loc[data_sub['antibiotic'] == anti]
            data_sub_anti = data_sub_anti.loc[:, ('genome_id', 'resistant_phenotype')]
            print(species, '=============>>', anti)
            #print(data_sub_anti)
            data_sub_anti=data_sub_anti.drop_duplicates()

            # check data balance
            balance_check = data_sub_anti.groupby(by="resistant_phenotype").count()
            balance_check.to_csv(save_name_meta + 'balance_check.txt', sep="\t")
            #print('Check phenotype balance.', balance_check)
            if balance_check.index.shape[0] == 2:# there is Neisseria gonorrhoeae w.r.t. ceftriaxone, no R pheno.
                balance_ratio = balance_check.iloc[0]['genome_id'] / balance_check.iloc[1]['genome_id']
                if min(balance_check.iloc[0]['genome_id'], balance_check.iloc[1]['genome_id']) <100:
                    select_antibiotic_fianl.remove(anti)
                    print('not selected')
                    print(balance_check)
                else:#final selected

                    data_sub_anti.to_csv(save_name_modelID + '.txt', sep="\t")
                    if balance_ratio > 2 or balance_ratio < 0.5:# #final selected, need to downsample.
                        # if not balance, downsampling
                        print('Downsampling starts.....balance_ratio=', balance_ratio)
                        label_down = balance_check.idxmax().to_numpy()[0]
                        label_keep = balance_check.idxmin().to_numpy()[0]
                        print('!!!!!!!!!!!!!label_down:', label_down)
                        data_draw = data_sub_anti[data_sub_anti['resistant_phenotype'] == str(label_down)]
                        data_left = data_sub_anti[data_sub_anti['resistant_phenotype'] != str(label_down)]
                        data_drew = data_draw.sample(n=int(1.5 * balance_check.loc[str(label_keep), 'genome_id']))
                        data_sub_anti_downsampling = pd.concat([data_drew, data_left], ignore_index=True, sort=False)
                        # print('downsampling',data_sub_anti)
                        # check balance again:
                        balance_check = data_sub_anti_downsampling.groupby(by="resistant_phenotype").count()
                        print('Check phenotype balance after downsampling.', balance_check)
                        balance_check.to_csv(save_name_modelID + 'balance_check.txt', mode='a', sep="\t")
                    else:
                        print('balanced dataset.', balance_check)
            else:
                select_antibiotic_fianl.remove(anti)
        Species_quality.at[species,'modelling antibiotics']= select_antibiotic_fianl
        Species_quality.at[species, 'number'] =len(select_antibiotic_fianl)

    print(Species_quality)
    Species_quality.to_csv('Species_antibiotic_FineQuality.csv', sep="\t")


if __name__ == '__main__':
    # main.make_dir()#preparing folders for results
    # summarise_strain()
    # summarise_species()
    # sorting_deleteing(500)#retain only this that has >=N strains for a specif antibotic w.r.t. a species'''
    # extract_id()
    # download_quality()
    # extract_id_quality() #downloaded quality meta data, saved at the subdirectory quality.
    # filter_quality()
    extract_id_quality_analysis()#only for the author use, delete when completing.